
	<div style="position: absolute; top: 10px; width: 100%; text-align: center; ">
		<a href="http://threejs.org" target="_blank">three.js</a> - Combo Camera<br>
		View: <a href="#" onclick="setOrthographic();return false;"> Orthographic</a> |
			<a href="#" onclick="setPerspective();return false;">Perspective</a><br>
		Lens: <a href="#" onclick="setLens(12);return false;">12mm</a> |
			<a href="#" onclick="setLens(16);return false;">16mm</a> |
			<a href="#" onclick="setLens(24);return false;">24mm</a> |
			<a href="#" onclick="setLens(35);return false;">35mm</a> |
			<a href="#" onclick="setLens(50);return false;">50mm</a> |
			<a href="#" onclick="setLens(60);return false;">60mm</a> |
			<a href="#" onclick="setLens(85);return false;">85mm</a> |
			<a href="#" onclick="setLens(105);return false;">105mm</a><br>
		Fov: <a href="#" onclick="setFov(30);return false;">30째</a> |
			<a href="#" onclick="setFov(50);return false;">50째</a> |
			<a href="#" onclick="setFov(70);return false;">70째</a> |
			<a href="#" onclick="setFov(100);return false;">100째</a><br>
		Zoom: <a href="#" onclick="camera.setZoom(0.5);return false;">0.5x</a> |
				<a href="#" onclick="camera.setZoom(1);return false;">1x</a> |
				<a href="#" onclick="camera.setZoom(2);return false;">2x</a> |

			<br/>
		Views: <a href="#" onclick="camera.toTopView();lookAtScene=false;console.log('T');return false;">Top view</a> |
			<a href="#" onclick="camera.toBottomView();lookAtScene=false;console.log('B');return false;">Bottom view</a> |
			<a href="#" onclick="camera.toLeftView();lookAtScene=false;console.log('L');return false;">Left view</a> |
			<a href="#" onclick="camera.toRightView();lookAtScene=false;console.log('R');return false;">Right view</a> |
			<a href="#" onclick="camera.toFrontView();lookAtScene=false;console.log('F');return false;">Front view</a> |
			<a href="#" onclick="camera.toBackView();lookAtScene=false;console.log('A');return false;">Back view</a> |
			<a href="#" onclick="lookAtScene=true;return false;">Look at Scene</a>
			<br/>
		<div id="fov"></div>
	</div>
	<!--<canvas id="myc"></canvas>-->
    <script>	
			var container, stats;
			var camera, scene, renderer, controls, group;
			var lookAtScene = true;
			init();
			animate();
			function setFov( fov ) {
				camera.setFov( fov );
				document.getElementById('fov').innerHTML = 'FOV '+ fov.toFixed(2) +'&deg;' ;
			}
			function setLens( lens ) {
				// try adding a tween effect while changing focal length, and it'd be even cooler!
				var fov = camera.setLens( lens );
				document.getElementById('fov').innerHTML = 'Converted ' + lens + 'mm lens to FOV '+ fov.toFixed(2) +'&deg;' ;
			}
			function setOrthographic() {
				camera.toOrthographic();
				document.getElementById('fov').innerHTML = 'Orthographic mode' ;
			}
			function setPerspective() {
				camera.toPerspective();
				document.getElementById('fov').innerHTML = 'Perspective mode' ;
			}
			function init() {
				container = document.createElement( 'div' );
				document.body.appendChild( container );
				camera = new THREE.CombinedCamera( window.innerWidth / 2, window.innerHeight / 2, 70, 1, 1000, - 500, 1000 );
				camera.position.x = 000; //200 these are the starting side values 
				camera.position.y = 050; //100
				camera.position.z = 200; //200
				scene = new THREE.Scene();
				
				/* Grid */
				var size = 500, step = 50;
				var geometry = new THREE.Geometry();
				for ( var i = - size; i <= size; i += step ) {
					geometry.vertices.push( new THREE.Vector3( - size, 0, i ) );
					geometry.vertices.push( new THREE.Vector3(   size, 0, i ) );
					geometry.vertices.push( new THREE.Vector3( i, 0, - size ) );
					geometry.vertices.push( new THREE.Vector3( i, 0,   size ) );
				}
				var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: 0.2 } );
				var line = new THREE.LineSegments( geometry, material );
				scene.add( line );
				
				/* DVD Box */
				//var geometry = new THREE.CubeGeometry(10, 10, 10);
				var mtlLoader = new THREE.MTLLoader();
				mtlLoader.setTexturePath('Users\josh.hnat\Desktop');
				mtlLoader.setPath('');
				mtlLoader.load('DVD case.mtl', function (materials) {
					materials.preload();
					var objLoader = new THREE.OBJLoader();
					objLoader.setMaterials(materials);
					//objLoader.setPath('\');
					objLoader.load('DVD case.obj', function (object) {
						console.log(object);
						object.name = "3DModel";
						//object.castShadow = true;
						scene.add(object);
					});
				});
				/*var loader = new THREE.TextureLoader();
				//group = new THREE.Group();
				//scene.add( group );				
				// load a resource
				loader.load(
					// resource URL
					'1411786h.jpg',
					// Function when resource is loaded
					function ( texture ) {
						// do something with the texture
						var material = new THREE.MeshBasicMaterial( {
							map: texture
						 } );
						var mesh = new THREE.Mesh(geometry, material);
						group.add(mesh);
					},
					// Function called when download progresses
					function ( xhr ) {
						console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
					},
					// Function called when download errors
					function ( xhr ) {
						console.log( 'An error happened' );
					}
				);*/
				
				/* Cubes 
				var geometry = new THREE.BoxGeometry( 50, 50, 50 );
				var material = new THREE.MeshLambertMaterial( { color: 0xffffff, overdraw: 0.5 } );
				for ( var i = 0; i < 100; i ++ ) {
					var cube = new THREE.Mesh( geometry, material );
					cube.scale.y = Math.floor( Math.random() * 2 + 1 );
					cube.position.x = Math.floor( ( Math.random() * 1000 - 500 ) / 50 ) * 50 + 25;
					cube.position.y = ( cube.scale.y * 50 ) / 2;
					cube.position.z = Math.floor( ( Math.random() * 1000 - 500 ) / 50 ) * 50 + 25;
					scene.add(cube);
				}*/
				
				/* Model 
				var mtlLoader = new THREE.MTLLoader();
				mtlLoader.setTexturePath('Users\josh.hnat\Desktop');
				mtlLoader.setPath('');
				mtlLoader.load('girl.mtl', function (materials) {
					materials.preload();
					//materials.materials.default.map.magFilter = THREE.NearestFilter;
					//materials.materials.default.map.minFilter = THREE.LinearFilter;
					var objLoader = new THREE.OBJLoader();
					objLoader.setMaterials(materials);
					//objLoader.setPath('\');
					objLoader.load('girl.obj', function (object) {
						console.log(object);
						object.name = "3DModel";
						//object.castShadow = true;
						object.translateZ(-100);
						object.scale.z = 2;
						object.scale.x = 2;
						object.scale.y = 2;
						//object.position.set(0,0,0);
						//object.__dirtyPosition = true;
						//object.rotateX(-21);
						//object.translateOnAxis(new THREE.Vector3(50,100,0), .1);
						scene.add(object);
					});
				});	*/		
				
				// Lights
				var ambientLight = new THREE.AmbientLight( Math.random() * 0x10 );
				scene.add( ambientLight );
				var directionalLight = new THREE.DirectionalLight( Math.random() * 0xffffff );
				directionalLight.position.x = Math.random() - 0.5;
				directionalLight.position.y = Math.random() - 0.5;
				directionalLight.position.z = Math.random() - 0.5;
				directionalLight.position.normalize();
				scene.add( directionalLight );
				var directionalLight = new THREE.DirectionalLight( Math.random() * 0xffffff );
				directionalLight.position.x = Math.random() - 0.5;
				directionalLight.position.y = Math.random() - 0.5;
				directionalLight.position.z = Math.random() - 0.5;
				directionalLight.position.normalize();
				scene.add( directionalLight );
				renderer = new THREE.CanvasRenderer();
				renderer.setClearColor( 0xf0f0f0 );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );
				
				controls = new THREE.TrackballControls(camera, renderer.domElement);
				
				stats = new Stats();
				container.appendChild( stats.dom );
				window.addEventListener( 'resize', onWindowResize, false );
				function onWindowResize(){
					camera.setSize( window.innerWidth, window.innerHeight );
					camera.updateProjectionMatrix();
					renderer.setSize( window.innerWidth, window.innerHeight );
				}
				
				
			}
			//
			function animate() {
				requestAnimationFrame( animate );
				stats.begin();
				controls.update();
				render();
				stats.end();
			}
			function render() {
				//var timer = Date.now() * 0.0001;
				//camera.position.x = Math.cos( timer ) * 10;
				//camera.position.z = Math.sin( timer ) * 10;
				if ( lookAtScene ) camera.lookAt( scene.position );
				renderer.render( scene, camera );
			}

    </script>
	
	